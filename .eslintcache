[{"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js":"1","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js":"2","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js":"3","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js":"4","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js":"5","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js":"6","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js":"7","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js":"8","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js":"9","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js":"10","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js":"11","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js":"12","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js":"13","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js":"14","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js":"15","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js":"16","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js":"17","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js":"18","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js":"19","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js":"20"},{"size":210,"mtime":1606394569299,"results":"21","hashOfConfig":"22"},{"size":697,"mtime":1606994785185,"results":"23","hashOfConfig":"22"},{"size":5517,"mtime":1622630971631,"results":"24","hashOfConfig":"22"},{"size":2658,"mtime":1622628587352,"results":"25","hashOfConfig":"22"},{"size":796,"mtime":1606826599793,"results":"26","hashOfConfig":"22"},{"size":2159,"mtime":1607005810163,"results":"27","hashOfConfig":"22"},{"size":1461,"mtime":1606801261298,"results":"28","hashOfConfig":"22"},{"size":2075,"mtime":1606904458619,"results":"29","hashOfConfig":"22"},{"size":4507,"mtime":1622195765386,"results":"30","hashOfConfig":"22"},{"size":245,"mtime":1620883086032,"results":"31","hashOfConfig":"22"},{"size":5631,"mtime":1607063105483,"results":"32","hashOfConfig":"22"},{"size":4219,"mtime":1607067433211,"results":"33","hashOfConfig":"22"},{"size":2153,"mtime":1607057973118,"results":"34","hashOfConfig":"22"},{"size":4011,"mtime":1607067582717,"results":"35","hashOfConfig":"22"},{"size":4210,"mtime":1607008656874,"results":"36","hashOfConfig":"22"},{"size":4524,"mtime":1607059461055,"results":"37","hashOfConfig":"22"},{"size":9883,"mtime":1620717669443,"results":"38","hashOfConfig":"22"},{"size":24771,"mtime":1622211805914,"results":"39","hashOfConfig":"22"},{"size":8188,"mtime":1622195772264,"results":"40","hashOfConfig":"22"},{"size":7826,"mtime":1622799383901,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18q8pxw",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js",[],["95","96"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js",[],["97","98"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js",["99"],"import React, { useState } from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nimport routes from \"../data/routes.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbarMargin: {\r\n    ...theme.mixins.toolbar,\r\n    // marginBottom:\"1em\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    textTransform: \"none\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  drawer: {\r\n    backgroundColor: theme.palette.common.blue,\r\n  },\r\n  drawerItem: {\r\n    ...theme.typography.drawer,\r\n    opacity: 0.7,\r\n    color: \"white\",\r\n  },\r\n  drawerItemSelected: {\r\n    ...theme.typography.drawer,\r\n    opacity: 1,\r\n    color: \"white\",\r\n    \"& .MuiListItemText-root\": {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  drawerIconContainer: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  appbar: {\r\n    zIndex: theme.zIndex.modal + 1,\r\n  },\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n  });\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [user, setUser] = useState({ userName: \"\", password: \"\" });\r\n  const [buttonText, setButtonText] = useState(\"Login\");\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    localStorage.setItem(\"username\", user.userName);\r\n    setOpenDialog(false);\r\n    setButtonText(\"Logout\");\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"username\");\r\n    setButtonText(\"Login\");\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (buttonText === \"Login\") handleOpenDialog();\r\n    else handleLogout();\r\n  };\r\n\r\n  const login = (\r\n    <React.Fragment>\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Login</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Username\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, userName: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <TextField\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, password: e.target.value });\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const drawer = (\r\n    <React.Fragment>\r\n      <Drawer\r\n        open={openDrawer}\r\n        onClose={() => setOpenDrawer(false)}\r\n        onOpen={() => setOpenDrawer(true)}\r\n        classes={{ paper: classes.drawer }}\r\n      >\r\n        <div className={classes.toolbarMargin} />\r\n        <List disablePadding>\r\n          {routes.map((route) => (\r\n            <ListItem\r\n              divider\r\n              button\r\n              component={Link}\r\n              to={route.link}\r\n              onClick={() => {\r\n                setOpenDrawer(false);\r\n                setValue(route.activeIndex);\r\n              }}\r\n              selected={value === route.activeIndex}\r\n              classes={{ selected: classes.drawerItemSelected }}\r\n            >\r\n              <ListItemText className={classes.drawerItem} disableTypography>\r\n                {route.name}\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ElevationScroll>\r\n        <AppBar className={classes.appbar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              onClick={() => setOpenDrawer(!openDrawer)}\r\n              className={classes.drawerIconContainer}\r\n            >\r\n              <MenuIcon style={{ color: \"white\" }} />\r\n            </IconButton>\r\n            {drawer}\r\n            <Button className={classes.drawerIconContainer}>\r\n              <Typography className={classes.title}>\r\n                FHIR Data Resources\r\n              </Typography>\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              size=\"small\"\r\n              style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n              onClick={handleClick}\r\n            >\r\n              {buttonText}\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <div className={classes.toolbarMargin} />\r\n      {login}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js",[],["100","101"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js",[],["102","103"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js",[],["104","105"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js",["106","107"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport {Typography,Grid} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link,withRouter} from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport PatientDetails from \"./PatientDetails\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root:{\r\n    flexGrow:1,\r\n    padding:\"3em\"\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    maxWidth:1000\r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n    margin: \"2rem\",\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    margin: \"1rem\",\r\n  },\r\n  message:{\r\n    textAlign:\"center\",\r\n    color:theme.palette.common.red\r\n  },\r\n  hyperlink:{\r\n    textDecoration:\"underline\",\r\n    color:theme.palette.common.red,\r\n    textTransform:\"none\"\r\n  }\r\n}));\r\nconst PatientTable = (props) => {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if(request.total!==0)\r\n      setPatients(request.data.entry);\r\n      else\r\n      setPatients([]);\r\n      console.log(\"Request...\",request.data)\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction =\"column\">\r\n        <Grid item>\r\n        <Typography variant=\"h4\" className={classes.heading}>\r\n        Patient Data\r\n      </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n\r\n        \r\n     \r\n      {patients?(<TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>FHIR ID</TableCell>\r\n              <TableCell>Unique ID</TableCell>\r\n              <TableCell>Assigner</TableCell>\r\n              <TableCell>Start Date</TableCell>\r\n              <TableCell>Active Status</TableCell>\r\n              <TableCell>Official First Name</TableCell>\r\n              <TableCell>Official Last Name</TableCell>\r\n\r\n              <TableCell>Gender</TableCell>\r\n              <TableCell>BirthDate</TableCell>\r\n              <TableCell>Deceased Status</TableCell>\r\n              <TableCell>General Practitioner</TableCell>\r\n\r\n\r\n            </TableRow>\r\n           \r\n          </TableHead>\r\n          <TableBody>\r\n           {\r\n             patients.map(patient=>{\r\n              const uniqid= patient.resource.identifier[0].value\r\n              return (\r\n              <TableRow>\r\n              <TableCell>\r\n              {patient.resource['id']}\r\n              </TableCell>\r\n              <TableCell>\r\n                \r\n                <Button component={Link} to={`/view-patient-info/${uniqid}`} className={classes.hyperlink} size=\"small\">{patient.resource.identifier[0].value}</Button>\r\n             \r\n                </TableCell>\r\n              <TableCell>{patient.resource.identifier[0].assigner?patient.resource.identifier[0].assigner[\"display\"]:\"\"}</TableCell>\r\n              <TableCell>{patient.resource.identifier[0].period?patient.resource.identifier[0].period[\"start\"]:\"\"}</TableCell>\r\n              <TableCell>{patient.resource.active?patient.resource.active.toString():\"\"}</TableCell>\r\n              <TableCell>{patient.resource.name[0].given[0]}</TableCell>\r\n              <TableCell>{patient.resource.name[0].given[1]}</TableCell>\r\n\r\n              <TableCell>{patient.resource.gender.toString()}</TableCell>\r\n              <TableCell>{patient.resource.birthDate}</TableCell>\r\n              <TableCell>{patient.resource.deceasedBoolean.toString()}</TableCell>\r\n              <TableCell>{patient.resource.generalPractitioner[0].reference}</TableCell>\r\n            </TableRow>\r\n             )})\r\n           }\r\n\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>):<Typography className={classes.message}>No data Found!</Typography>}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/patient\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withRouter(PatientTable);\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js",["108"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n}));\r\n\r\nconst PatientById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [patient, setPatient] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setPatient(result.data);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    const result = await axios.delete(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);   \r\n      setTimeout(()=>{      setStatus(\"loading\");\r\n      \r\n    },2000)\r\n      setPatient({});\r\n      enqueueSnackbar(\"Deleted successfully!\");    \r\n  };\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n           \r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/patient\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Patient Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {patient[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{patient.identifier[0].period.start}</Typography>\r\n              <Typography><b>Assigner</b>&nbsp;{patient.identifier[0].assigner.display}</Typography>\r\n              <Typography><b>Active</b>&nbsp;{patient[\"active\"].toString()}</Typography>\r\n              <Typography><b>Name</b>&nbsp;{patient.name[0].given.toString()}</Typography>\r\n              <Typography><b>Work</b>&nbsp;{patient.telecom[1].value.toString()}</Typography>\r\n              <Typography><b>Mobile</b>&nbsp;{patient.telecom[2].value.toString()}</Typography>\r\n\r\n              <Typography><b>Gender</b>&nbsp;{patient.gender.toString()}</Typography>\r\n              <Typography><b>DOB</b>&nbsp;{patient.birthDate}</Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n        <Button variant=\"contained\" color=\"secondary\"size=\"small\" onClick={handleClickOpen}>Delete</Button>\r\n      </CardActions>\r\n          </Card>\r\n          <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n           Confirm to delete patient data.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={()=>{handleClose();handleDelete();}} color=\"secondary\" autoFocus>\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nPatientById.propTypes = {\r\n  patient: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    identifier: PropTypes.array,\r\n  }),\r\n};\r\n\r\nexport default PatientById;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js",["109"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n    \r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n    margin: \"2rem\",\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    margin: \"1rem\",\r\n  },\r\n  message:{\r\n    textAlign:\"center\",\r\n    color:theme.palette.common.red\r\n  }\r\n}));\r\nconst ObservationTable = (props) => {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if(request.total!==0)\r\n      setPatients(request.data.entry);\r\n      else\r\n      setPatients([])\r\n      console.log(\"Request...\",request.data.entry)\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h4\" className={classes.heading}>\r\n        Observation Data\r\n      </Typography>\r\n      {patients?(<TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>ID</TableCell>\r\n              <TableCell>Test Date</TableCell>\r\n              <TableCell colSpan={3}>Tag</TableCell>\r\n              <TableCell colSpan={3}>Coding Category</TableCell>\r\n              <TableCell colSpan={3}>Coding</TableCell>\r\n             \r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n           {\r\n             patients.map(patient=>(\r\n              <TableRow>\r\n              <TableCell>{patient.resource.id}</TableCell>\r\n              <TableCell>{patient.resource.effectiveDateTime}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].system}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].code}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].display}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].system}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].code}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].display}</TableCell>\r\n            \r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.system}<br/></React.Fragment>))\r\n              }</TableCell>\r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.code}<br/></React.Fragment>))\r\n              }</TableCell>\r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.display}<br/></React.Fragment>))\r\n              }</TableCell>\r\n            </TableRow>\r\n             ))\r\n           }\r\n\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>):<Typography className={classes.message}>No Record found!</Typography>}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/observation\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ObservationTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js",["110"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n    margin: \"2rem\",\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    margin: \"1rem\",\r\n  },\r\n  message:{\r\n    textAlign:\"center\",\r\n    color:theme.palette.common.red\r\n  }\r\n}));\r\nconst AllergyTable = (props) => {\r\n  const classes = useStyles();\r\n  const [allergy, setAllergy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if(request.total!==0)\r\n      setAllergy(request.data.entry);\r\n      else\r\n      setAllergy([]);\r\n      console.log(request.data.entry)\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h4\" className={classes.heading}>\r\n        Allergy Intolerance Data\r\n      </Typography>\r\n      {allergy?(<TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell colSpan={5}>ID</TableCell>\r\n              <TableCell colSpan={3}>Substance</TableCell>\r\n              <TableCell colSpan={3}>Manifestation</TableCell>           \r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell>Last Occurance</TableCell>\r\n              <TableCell>Categories</TableCell>\r\n              <TableCell>Criticality</TableCell>\r\n              <TableCell>Description</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n           {\r\n             allergy.map(allergy=>(\r\n              <TableRow>\r\n              <TableCell>{allergy[\"resource\"][\"id\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"lastOccurrence\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"category\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"criticality\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].note[0][\"text\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"system\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"code\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"display\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"system\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"code\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"display\"]}</TableCell>\r\n            </TableRow>\r\n             ))\r\n           }\r\n\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>):<Typography className={classes.message}>No record found!</Typography>}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/allergy-intolerance\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllergyTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js",["111","112"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n  subHeading:{\r\n      color:theme.palette.common.blue\r\n  }\r\n}));\r\n\r\nconst ObservationById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [observation, setObservation] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Observation/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setObservation(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            // variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n            // onClick={handleSearch}\r\n            // endIcon={<SearchIcon />}\r\n            // className={classes.button}\r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/observation\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Observation Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {observation[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{observation.effectiveDateTime}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Tag</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"display\"]}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Coding Category</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"display\"]}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ObservationById;\r\n",["113","114"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js",["115","116"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js",["117"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, Button, TextField, Select } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  DialogContent,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst instance = Axios.create({\r\n  baseURL:\r\n    \"http://fhirmashup-cors-http-aceistio3.cloud-integration-ocp45-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/\",\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: \"2em\",\r\n  },\r\n  cell: {\r\n    border: \"1px solid black\",\r\n  },\r\n}));\r\n\r\nconst PatientDetails = (props) => {\r\n  const params = useParams();\r\n  const classes = useStyles();\r\n  const [data, setPatient] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [openMed, setOpenMed] = useState(false);\r\n  const [disease, setDisease] = useState(\"\");\r\n  const [med, setMed] = useState(\"\");\r\n  const [medicationData, setMedicationData] = useState({\r\n    patientId: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    practitionerId: \"\",\r\n    encounterId: \"\",\r\n    disease: \"\",\r\n    medicationDetails: \"\",\r\n    dosageInstruction: \"\",\r\n  });\r\n  const [openAlert,setOpenAlert]=useState(false);\r\n\r\n  const postUrl=\"http://fhiraddmedicationdetail-http-aceistio3.cloud-integration-ocp45-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud:80/fhiraddmedicationservice/v1/medidata\";\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await instance.get(`${props.path}${params.id}`);\r\n      if (request.data) {\r\n        setPatient(request.data);\r\n        setMedicationData({\r\n          ...medicationData,\r\n          patientId: request.data.patient.id,\r\n          firstName: request.data.patient.firstName,\r\n          lastName: request.data.patient.lastName,\r\n          practitionerId: request.data.encounter.practitioner.reference,\r\n          encounterId: request.data.encounter.id,\r\n        });\r\n        setLoaded(true);\r\n      } else setPatient([]);\r\n\r\n      console.log(\"Request...\", data.length);\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path, params.id, data]);\r\n\r\n  const handleOpenMed = () => {\r\n    setOpenMed(true);\r\n  };\r\n  const handleCloseMed = () => {\r\n    setOpenMed(false);\r\n  };\r\n\r\n  const handleDiseaseChange = (e) => {\r\n    setDisease(e.target.value);\r\n    setMedicationData({ ...medicationData, disease: e.target.value });\r\n  };\r\n\r\n  const handleMedChange = (e) => {\r\n    setMed(e.target.value);\r\n    setMedicationData({ ...medicationData, medicationDetails: e.target.value });\r\n  };\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n\r\n    Axios.post(postUrl,{\r\n      patientId: medicationData.patientId,\r\n      firstName: medicationData.firstName,\r\n      lastName: medicationData.lastName,\r\n      practitionerId: medicationData.practitionerId,\r\n      encounterId: medicationData.encounterId,\r\n      disease: medicationData.disease,\r\n      medicationDetails: medicationData.medicationDetails,\r\n      dosageInstruction: medicationData.dosageInstruction,\r\n\r\n    }).then(res=>{\r\n      console.log(\"Post response is...\",res);\r\n      setOpenAlert(true);\r\n    }).catch(err=>{\r\n      console.log(\"Error in post...\",err)\r\n    })\r\n\r\n  }\r\n\r\n  const addMedDialog = (\r\n    <React.Fragment>\r\n      <Dialog open={openMed} onClose={handleCloseMed}>\r\n        <DialogTitle>\r\n          Add Medication\r\n          <IconButton className={classes.closeIcon} onClick={handleCloseMed}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Patient ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.patientId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"First Name\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.firstName}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Last Name\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.lastName}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Practitioner ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.practitionerId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Encounter ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.encounterId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <InputLabel id=\"demo-simple-select-label\">Disease</InputLabel>\r\n\r\n          <Select value={disease} onChange={handleDiseaseChange}>\r\n            <MenuItem key=\"dis1\" value=\"Oral Chemotherapy\">\r\n              Oral Chemotherapy\r\n            </MenuItem>\r\n            <MenuItem key=\"dis2\" value=\"Arthritis\">\r\n              Arthritis\r\n            </MenuItem>\r\n            <MenuItem key=\"dis3\" value=\"Fungal Infection\">\r\n              Fungal Infection\r\n            </MenuItem>\r\n            <MenuItem key=\"dis4\" value=\"Anxiety\">\r\n              Anxiety\r\n            </MenuItem>\r\n            <MenuItem key=\"dis5\" value=\"Bacterial Infection\">\r\n              Bacterial Infection\r\n            </MenuItem>\r\n          </Select>\r\n\r\n          <InputLabel id=\"demo-simple-select-label\">\r\n            Medication Details\r\n          </InputLabel>\r\n\r\n          <Select value={med} onChange={handleMedChange}>\r\n            <MenuItem\r\n              key=\"med1\"\r\n              value=\"Capecitabine 500mg oral tablet (Xeloda)\"\r\n            >\r\n              Capecitabine 500mg oral tablet (Xeloda)\r\n            </MenuItem>\r\n            <MenuItem key=\"med2\" value=\"Prednisone (substance)\">\r\n              Prednisone (substance)\r\n            </MenuItem>\r\n            <MenuItem key=\"med3\" value=\"Nystatin\">\r\n              Fungal Infection\r\n            </MenuItem>\r\n            <MenuItem key=\"med4\" value=\"Anxiety\">\r\n              Anxiety\r\n            </MenuItem>\r\n            <MenuItem key=\"med5\" value=\"Bacterial Infection\">\r\n              Bacterial Infection\r\n            </MenuItem>\r\n          </Select>\r\n\r\n          <TextField\r\n            id=\"password\"\r\n            label=\"Dosage Instruction\"\r\n            type=\"name\"\r\n            fullWidth\r\n            onChange={(e) =>\r\n              setMedicationData({\r\n                ...medicationData,\r\n                dosageInstruction: e.target.value,\r\n              })\r\n            }\r\n            color=\"primary\"\r\n            required\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={handleSubmit}>Add</Button>\r\n        </DialogActions>\r\n        {openAlert ? <Alert severity=\"success\">Added successfully</Alert> : null}\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" className={classes.root}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Patient Details - {params.id}</Typography>\r\n        </Grid>\r\n        {loaded ? (\r\n          <React.Fragment>\r\n            <Grid item>\r\n              <Grid container direction=\"column\">\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n                    onClick={handleOpenMed}\r\n                  >\r\n                    Create Medication\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Patient\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer>\r\n                    <Table size=\"small\" className={classes.cell}>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>ID</TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Last Updated\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Firstname\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Lastname\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>Gender</TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Birthdate\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Deceased\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.id}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.lastUpdatedDate}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.firstName}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.lastName}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.gender}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.birthDate}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            {data.patient.deceased ? \"Yes\" : \"No\"}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid container direction=\"column\">\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Observation\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer>\r\n                    <Table size=\"small\" className={classes.cell}>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>ID</TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Category\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Description\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            Effective Date\r\n                          </TableCell>\r\n                          <TableCell colSpan={3} className={classes.cell}>\r\n                            Value Quantity\r\n                          </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell\r\n                            colSpan={4}\r\n                            className={classes.cell}\r\n                          ></TableCell>\r\n                          <TableCell className={classes.cell}>Value</TableCell>\r\n                          <TableCell className={classes.cell}>Unit</TableCell>\r\n                          <TableCell className={classes.cell}>System</TableCell>\r\n                          <TableCell className={classes.cell}>Code</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.id}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.category}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.description}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.effectiveDateTime}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.value}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.unit}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.system}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.code}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginTop: \"2em\" }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Encounter\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TableContainer>\r\n                      <Table size=\"small\" className={classes.cell}>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>ID</TableCell>\r\n                            <TableCell colSpan={2} className={classes.cell}>\r\n                              Location\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Status\r\n                            </TableCell>\r\n                            <TableCell colSpan={2} className={classes.cell}>\r\n                              Period\r\n                            </TableCell>\r\n                            <TableCell colSpan={2} className={classes.cell}>\r\n                              Practitioner\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}></TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Description\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}></TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Start\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>End</TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>Name</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.id}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.location.reference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.location.description}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.status}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.period.start}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.period.end}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.practitioner.reference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.practitioner.name}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginTop: \"2em\" }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Allergy Intolerance\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TableContainer>\r\n                      <Table size=\"small\" className={classes.cell}>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>ID</TableCell>\r\n                            <TableCell className={classes.cell}>Type</TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Category\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Criticality\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Onset Date\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Recorded Date\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Recorder Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Asserter Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Last Occurance\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell} colSpan={4}>\r\n                              Reaction\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell\r\n                              colSpan={9}\r\n                              className={classes.cell}\r\n                            ></TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Test Substance\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Description\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Onset\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              Severity\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.id}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.type}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.category}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.criticality}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.onsetdatetime}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.recordedDate}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.recorderReference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.asserterReference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.lastOccurrence}\r\n                            </TableCell>\r\n\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.testSubstance}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.description}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.onset}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.severity}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </React.Fragment>\r\n        ) : (\r\n          <LinearProgress />\r\n        )}\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            component={Link}\r\n            to=\"/view-patients\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </Grid>\r\n        {addMedDialog}{\" \"}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientDetails;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js",["118"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js",["119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"121","replacedBy":"125"},{"ruleId":"123","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":94,"column":9,"nodeType":"129","messageId":"130","endLine":94,"endColumn":20},{"ruleId":"121","replacedBy":"131"},{"ruleId":"123","replacedBy":"132"},{"ruleId":"121","replacedBy":"133"},{"ruleId":"123","replacedBy":"134"},{"ruleId":"121","replacedBy":"135"},{"ruleId":"123","replacedBy":"136"},{"ruleId":"127","severity":1,"message":"137","line":16,"column":8,"nodeType":"129","messageId":"130","endLine":16,"endColumn":22},{"ruleId":"127","severity":1,"message":"138","line":17,"column":8,"nodeType":"129","messageId":"130","endLine":17,"endColumn":22},{"ruleId":"127","severity":1,"message":"139","line":45,"column":28,"nodeType":"129","messageId":"130","endLine":45,"endColumn":41},{"ruleId":"127","severity":1,"message":"137","line":16,"column":8,"nodeType":"129","messageId":"130","endLine":16,"endColumn":22},{"ruleId":"127","severity":1,"message":"137","line":16,"column":8,"nodeType":"129","messageId":"130","endLine":16,"endColumn":22},{"ruleId":"127","severity":1,"message":"140","line":8,"column":16,"nodeType":"129","messageId":"130","endLine":8,"endColumn":27},{"ruleId":"127","severity":1,"message":"139","line":41,"column":28,"nodeType":"129","messageId":"130","endLine":41,"endColumn":41},{"ruleId":"121","replacedBy":"141"},{"ruleId":"123","replacedBy":"142"},{"ruleId":"127","severity":1,"message":"140","line":8,"column":16,"nodeType":"129","messageId":"130","endLine":8,"endColumn":27},{"ruleId":"127","severity":1,"message":"139","line":41,"column":28,"nodeType":"129","messageId":"130","endLine":41,"endColumn":41},{"ruleId":"143","severity":1,"message":"144","line":87,"column":6,"nodeType":"145","endLine":87,"endColumn":35,"suggestions":"146"},{"ruleId":"127","severity":1,"message":"147","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":36},{"ruleId":"127","severity":1,"message":"148","line":40,"column":10,"nodeType":"129","messageId":"130","endLine":40,"endColumn":18},{"ruleId":"127","severity":1,"message":"149","line":44,"column":10,"nodeType":"129","messageId":"130","endLine":44,"endColumn":21},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],"no-unused-vars","'handleClick' is assigned a value but never used.","Identifier","unusedVar",["150"],["151"],["150"],["151"],["150"],["151"],"'LinearProgress' is defined but never used.","'PatientDetails' is defined but never used.","'closeSnackbar' is assigned a value but never used.","'CardActions' is defined but never used.",["150"],["151"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'medicationData'. Either include it or remove the dependency array. You can also do a functional update 'setMedicationData(m => ...)' if you only need 'medicationData' in the 'setMedicationData' call.","ArrayExpression",["152"],"'useEffect' is defined but never used.","'password' is assigned a value but never used.","'fetchStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Update the dependencies array to be: [props.path, params.id, data, medicationData]",{"range":"155","text":"156"},[2703,2732],"[props.path, params.id, data, medicationData]"]