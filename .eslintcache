[{"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js":"1","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js":"2","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js":"3","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js":"4","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js":"5","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js":"6","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js":"7","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js":"8","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js":"9","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js":"10","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js":"11","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js":"12","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js":"13","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js":"14","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js":"15","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js":"16","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js":"17","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js":"18","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js":"19","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js":"20","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterTable.js":"21","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Encounter.js":"22","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterById.js":"23"},{"size":210,"mtime":1606394569299,"results":"24","hashOfConfig":"25"},{"size":869,"mtime":1622975410107,"results":"26","hashOfConfig":"25"},{"size":5518,"mtime":1622974545614,"results":"27","hashOfConfig":"25"},{"size":2950,"mtime":1624027194328,"results":"28","hashOfConfig":"25"},{"size":1385,"mtime":1622976950459,"results":"29","hashOfConfig":"25"},{"size":3177,"mtime":1622976516208,"results":"30","hashOfConfig":"25"},{"size":1461,"mtime":1606801261298,"results":"31","hashOfConfig":"25"},{"size":3016,"mtime":1622976715467,"results":"32","hashOfConfig":"25"},{"size":5201,"mtime":1624025719722,"results":"33","hashOfConfig":"25"},{"size":237,"mtime":1623229426071,"results":"34","hashOfConfig":"25"},{"size":7386,"mtime":1624102956753,"results":"35","hashOfConfig":"25"},{"size":7243,"mtime":1624025086403,"results":"36","hashOfConfig":"25"},{"size":3169,"mtime":1622976354672,"results":"37","hashOfConfig":"25"},{"size":6410,"mtime":1623230919184,"results":"38","hashOfConfig":"25"},{"size":4712,"mtime":1624024760350,"results":"39","hashOfConfig":"25"},{"size":5050,"mtime":1624104410012,"results":"40","hashOfConfig":"25"},{"size":15008,"mtime":1624029709112,"results":"41","hashOfConfig":"25"},{"size":25453,"mtime":1623245964424,"results":"42","hashOfConfig":"25"},{"size":8188,"mtime":1622195772264,"results":"43","hashOfConfig":"25"},{"size":7826,"mtime":1622799383901,"results":"44","hashOfConfig":"25"},{"size":4575,"mtime":1624026652999,"results":"45","hashOfConfig":"25"},{"size":1742,"mtime":1624027153253,"results":"46","hashOfConfig":"25"},{"size":6616,"mtime":1624027521465,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"18q8pxw",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js",[],["104","105"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js",[],["106","107"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js",["108"],"import React, { useState } from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nimport routes from \"../data/routes.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbarMargin: {\r\n    ...theme.mixins.toolbar,\r\n    // marginBottom:\"1em\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    textTransform: \"none\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  drawer: {\r\n    backgroundColor: theme.palette.common.green,\r\n  },\r\n  drawerItem: {\r\n    ...theme.typography.drawer,\r\n    opacity: 0.7,\r\n    color: \"white\",\r\n  },\r\n  drawerItemSelected: {\r\n    ...theme.typography.drawer,\r\n    opacity: 1,\r\n    color: \"white\",\r\n    \"& .MuiListItemText-root\": {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  drawerIconContainer: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  appbar: {\r\n    zIndex: theme.zIndex.modal + 1,\r\n  },\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n  });\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [user, setUser] = useState({ userName: \"\", password: \"\" });\r\n  const [buttonText, setButtonText] = useState(\"Login\");\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    localStorage.setItem(\"username\", user.userName);\r\n    setOpenDialog(false);\r\n    setButtonText(\"Logout\");\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"username\");\r\n    setButtonText(\"Login\");\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (buttonText === \"Login\") handleOpenDialog();\r\n    else handleLogout();\r\n  };\r\n\r\n  const login = (\r\n    <React.Fragment>\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Login</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Username\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, userName: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <TextField\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, password: e.target.value });\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const drawer = (\r\n    <React.Fragment>\r\n      <Drawer\r\n        open={openDrawer}\r\n        onClose={() => setOpenDrawer(false)}\r\n        onOpen={() => setOpenDrawer(true)}\r\n        classes={{ paper: classes.drawer }}\r\n      >\r\n        <div className={classes.toolbarMargin} />\r\n        <List disablePadding>\r\n          {routes.map((route) => (\r\n            <ListItem\r\n              divider\r\n              button\r\n              component={Link}\r\n              to={route.link}\r\n              onClick={() => {\r\n                setOpenDrawer(false);\r\n                setValue(route.activeIndex);\r\n              }}\r\n              selected={value === route.activeIndex}\r\n              classes={{ selected: classes.drawerItemSelected }}\r\n            >\r\n              <ListItemText className={classes.drawerItem} disableTypography>\r\n                {route.name}\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ElevationScroll>\r\n        <AppBar className={classes.appbar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              onClick={() => setOpenDrawer(!openDrawer)}\r\n              className={classes.drawerIconContainer}\r\n            >\r\n              <MenuIcon style={{ color: \"white\" }} />\r\n            </IconButton>\r\n            {drawer}\r\n            <Button className={classes.drawerIconContainer}>\r\n              <Typography className={classes.title}>\r\n                FHIR Data Resources\r\n              </Typography>\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              size=\"small\"\r\n              style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n              onClick={handleClick}\r\n            >\r\n              {buttonText}\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <div className={classes.toolbarMargin} />\r\n      {login}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n",["109","110"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js",[],["111","112"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js",[],["113","114"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js",["115"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport {Typography,Grid} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    marginTop: \"1rem\",\r\n  },\r\n  message: {\r\n    textAlign: \"center\",\r\n    color: theme.palette.common.red,\r\n  },\r\n  cell:{\r\n    border:\"1px solid black\",\r\n    padding:\"0.1em\"\r\n  },\r\n  root:{\r\n    flexGrow:1,\r\n    padding:\"3em\"\r\n  }\r\n}));\r\nconst AllergyTable = (props) => {\r\n  const classes = useStyles();\r\n  const [allergy, setAllergy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if (request.total !== 0) setAllergy(request.data.entry);\r\n      else setAllergy([]);\r\n      console.log(request.data.entry);\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container className={classes.root} direction=\"column\">\r\n        <Grid item>\r\n        <Typography variant=\"h4\" className={classes.heading} gutterBottom>\r\n        Allergy Intolerance Data\r\n      </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n        {allergy ? (\r\n        <TableContainer component={Paper}>\r\n          <Table  >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.cell}>ID</TableCell>\r\n                <TableCell className={classes.cell}>Last Occurance</TableCell>\r\n                <TableCell className={classes.cell}>Categories</TableCell>\r\n                <TableCell className={classes.cell}>Criticality</TableCell>\r\n                <TableCell className={classes.cell}>Description</TableCell>\r\n                <TableCell colSpan={3} className={classes.cell}>Substance</TableCell>\r\n                <TableCell colSpan={3} className={classes.cell}>Manifestation</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className={classes.cell}></TableCell>\r\n                <TableCell className={classes.cell}></TableCell>\r\n                <TableCell className={classes.cell}></TableCell>\r\n                <TableCell className={classes.cell}></TableCell>\r\n                <TableCell className={classes.cell}></TableCell>\r\n\r\n                <TableCell className={classes.cell}>System</TableCell>\r\n                <TableCell className={classes.cell}>Code</TableCell>\r\n                <TableCell className={classes.cell}>Display</TableCell>\r\n                <TableCell className={classes.cell}>System</TableCell>\r\n                <TableCell className={classes.cell}>Code</TableCell>\r\n                <TableCell className={classes.cell}>Display</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {allergy.map((allergy) => (\r\n                <TableRow>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"id\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"lastOccurrence\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"category\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"criticality\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].note\r\n                      ? allergy[\"resource\"].note[0][\"text\"]\r\n                      : \"\"}\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]\r\n                      ? allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                          \"system\"\r\n                        ]\r\n                      : \"\"}\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]?\r\n                      allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                        \"code\"\r\n                      ]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]?\r\n                      allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                        \"display\"\r\n                      ]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                     {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"system\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"code\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"display\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <Typography className={classes.message}>No record found!</Typography>\r\n      )}\r\n        </Grid>\r\n        <Grid item>\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        component={Link}\r\n        to=\"/allergy-intolerance\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n        </Grid>\r\n      </Grid>\r\n     \r\n     \r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllergyTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js",["116"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, Button, TextField, Select } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  DialogContent,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n\r\nconst instance = Axios.create({\r\n  baseURL:\r\n    \"http://fhirmashuprestapi-http-ace.cp4i2021-tcs-jumpstart-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/fhirmashupservice/v1/fhirdata?\",\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: \"2em\",\r\n  },\r\n  cell: {\r\n    border: \"1px solid black\",\r\n    padding:\"0.2em\"\r\n  },\r\n  cellHead: {\r\n    border: \"1px solid black\",\r\n    padding:\"0.2em\",\r\n    color:\"white\"\r\n  },\r\n  patientHead:{\r\n    background:theme.palette.common.bn1\r\n  },\r\n  observationHead:{\r\n    background:theme.palette.common.bn2\r\n  },\r\n  encounterHead:{\r\n    background:theme.palette.common.bn3\r\n  },\r\n  allergyHead:{\r\n    background:theme.palette.common.bn4\r\n  }\r\n}));\r\n\r\nconst PatientDetails = (props) => {\r\n  const params = useParams();\r\n  const classes = useStyles();\r\n  const [data, setPatient] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [openMed, setOpenMed] = useState(false);\r\n  const [disease, setDisease] = useState(\"\");\r\n  const [med, setMed] = useState(\"\");\r\n  const [medicationData, setMedicationData] = useState({\r\n    patientId: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    practitionerId: \"\",\r\n    encounterId: \"\",\r\n    disease: \"\",\r\n    medicationDetails: \"\",\r\n    dosageInstruction: \"\",\r\n  });\r\n  const [openAlert,setOpenAlert]=useState(false);\r\n\r\n  const postUrl=\"http://fhiraddmedicationdata-http-ace.cp4i2021-tcs-jumpstart-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/fhiraddmedicationservice/v1/medidata\";\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await instance.get(`${props.path}${params.id}`);\r\n      if (request.data) {\r\n        setPatient(request.data);\r\n        setMedicationData({\r\n          ...medicationData,\r\n          patientId: request.data.patient.id,\r\n          firstName: request.data.patient.firstName,\r\n          lastName: request.data.patient.lastName,\r\n          practitionerId: request.data.encounter.practitioner.reference,\r\n          encounterId: request.data.encounter.id,\r\n        });\r\n        setLoaded(true);\r\n      } else setPatient([]);\r\n\r\n      console.log(\"Request...\", data.length);\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path, params.id, data]);\r\n\r\n  const handleOpenMed = () => {\r\n    setOpenMed(true);\r\n  };\r\n  const handleCloseMed = () => {\r\n    setOpenMed(false);\r\n  };\r\n\r\n  const handleDiseaseChange = (e) => {\r\n    setDisease(e.target.value);\r\n    setMedicationData({ ...medicationData, disease: e.target.value });\r\n  };\r\n\r\n  const handleMedChange = (e) => {\r\n    setMed(e.target.value);\r\n    setMedicationData({ ...medicationData, medicationDetails: e.target.value });\r\n  };\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n\r\n    Axios.post(postUrl,{\r\n      patientId: medicationData.patientId,\r\n      firstName: medicationData.firstName,\r\n      lastName: medicationData.lastName,\r\n      practitionerId: medicationData.practitionerId,\r\n      encounterId: medicationData.encounterId,\r\n      disease: medicationData.disease,\r\n      medicationDetails: medicationData.medicationDetails,\r\n      dosageInstruction: medicationData.dosageInstruction,\r\n\r\n    }).then(res=>{\r\n      console.log(\"Post response is...\",res);\r\n      setOpenAlert(true);\r\n    }).catch(err=>{\r\n      console.log(\"Error in post...\",err)\r\n    })\r\n\r\n  }\r\n\r\n  const addMedDialog = (\r\n    <React.Fragment>\r\n      <Dialog open={openMed} onClose={handleCloseMed}>\r\n        <DialogTitle>\r\n          Add Medication\r\n          <IconButton className={classes.closeIcon} onClick={handleCloseMed}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Patient ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.patientId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"First Name\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.firstName}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Last Name\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.lastName}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Practitioner ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.practitionerId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            id=\"name\"\r\n            label=\"Encounter ID\"\r\n            type=\"id\"\r\n            fullWidth\r\n            color=\"primary\"\r\n            defaultValue={medicationData.encounterId}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n          <InputLabel id=\"demo-simple-select-label\">Disease</InputLabel>\r\n\r\n          <Select value={disease} onChange={handleDiseaseChange}>\r\n            <MenuItem key=\"dis1\" value=\"Oral Chemotherapy\">\r\n              Oral Chemotherapy\r\n            </MenuItem>\r\n            <MenuItem key=\"dis2\" value=\"Arthritis\">\r\n              Arthritis\r\n            </MenuItem>\r\n            <MenuItem key=\"dis3\" value=\"Fungal Infection\">\r\n              Fungal Infection\r\n            </MenuItem>\r\n            <MenuItem key=\"dis4\" value=\"Anxiety\">\r\n              Anxiety\r\n            </MenuItem>\r\n            <MenuItem key=\"dis5\" value=\"Bacterial Infection\">\r\n              Bacterial Infection\r\n            </MenuItem>\r\n          </Select>\r\n\r\n          <InputLabel id=\"demo-simple-select-label\">\r\n            Medication Details\r\n          </InputLabel>\r\n\r\n          <Select value={med} onChange={handleMedChange}>\r\n            <MenuItem\r\n              key=\"med1\"\r\n              value=\"Capecitabine 500mg oral tablet (Xeloda)\"\r\n            >\r\n              Capecitabine 500mg oral tablet (Xeloda)\r\n            </MenuItem>\r\n            <MenuItem key=\"med2\" value=\"Prednisone (substance)\">\r\n              Prednisone (substance)\r\n            </MenuItem>\r\n            <MenuItem key=\"med3\" value=\"Nystatin 100,000 units/ml oral suspension\">\r\n            Nystatin 100,000 units/ml oral suspension\r\n            </MenuItem>\r\n            <MenuItem key=\"med4\" value=\"Alprazolam 0.25mg Oral Tablet\">\r\n            Alprazolam 0.25mg Oral Tablet\r\n            </MenuItem>\r\n            <MenuItem key=\"med5\" value=\"Amoxilin\">\r\n            Amoxilin\r\n            </MenuItem>\r\n          </Select>\r\n\r\n          <TextField\r\n            id=\"password\"\r\n            label=\"Dosage Instruction\"\r\n            type=\"name\"\r\n            fullWidth\r\n            onChange={(e) =>\r\n              setMedicationData({\r\n                ...medicationData,\r\n                dosageInstruction: e.target.value,\r\n              })\r\n            }\r\n            color=\"primary\"\r\n            required\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={handleSubmit}>Add</Button>\r\n        </DialogActions>\r\n        {openAlert ? <Alert severity=\"success\">Added successfully</Alert> : null}\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" className={classes.root}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Patient Details - {params.id}</Typography>\r\n        </Grid>\r\n        {loaded ? (\r\n          <React.Fragment>\r\n            <Grid item>\r\n              <Grid container direction=\"column\">\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n                    onClick={handleOpenMed}\r\n                  >\r\n                    Create Medication\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Patient\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer>\r\n                    <Table  className={classes.cell}>\r\n                      <TableHead className={classes.patientHead}>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cellHead}>ID</TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Last Updated\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Firstname\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Lastname\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>Gender</TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Birthdate\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Deceased\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.id}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.lastUpdatedDate}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.firstName}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.lastName}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.gender}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.birthDate}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.patient.deceased ? \"Yes\" : \"No\"}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid container direction=\"column\">\r\n                <Grid item style={{ marginTop: \"2em\" }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Observation\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TableContainer>\r\n                    <Table  >\r\n                      <TableHead className={classes.observationHead}>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cellHead}>ID</TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Category\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Description\r\n                          </TableCell>\r\n                          <TableCell className={classes.cellHead}>\r\n                            Effective Date\r\n                          </TableCell>\r\n                          <TableCell colSpan={4} className={classes.cellHead}>\r\n                            Value Quantity\r\n                          </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                          <TableCell\r\n                            colSpan={4}\r\n                            className={classes.cellHead}\r\n                          ></TableCell>\r\n                          <TableCell className={classes.cellHead}>Value</TableCell>\r\n                          <TableCell className={classes.cellHead}>Unit</TableCell>\r\n                          <TableCell className={classes.cellHead}>System</TableCell>\r\n                          <TableCell className={classes.cellHead}>Code</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.id}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.category}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.description}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.effectiveDateTime}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.value}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.unit}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.system}\r\n                          </TableCell>\r\n                          <TableCell className={classes.cell}>\r\n                            {data.observation.valueQuantity.code}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginTop: \"2em\" }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Encounter\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TableContainer>\r\n                      <Table  >\r\n                        <TableHead className={classes.encounterHead}>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cellHead}>ID</TableCell>\r\n                            <TableCell colSpan={2} className={classes.cellHead}>\r\n                              Location\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Status\r\n                            </TableCell>\r\n                            <TableCell colSpan={2} className={classes.cellHead}>\r\n                              Period\r\n                            </TableCell>\r\n                            <TableCell colSpan={2} className={classes.cellHead}>\r\n                              Practitioner\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cellHead}></TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Description\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}></TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Start\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>End</TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>Name</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.id}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.location.reference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.location.description}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.status}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.period.start}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.period.end}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.practitioner.reference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.encounter.practitioner.name}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginTop: \"2em\" }}>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Allergy Intolerance\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <TableContainer>\r\n                      <Table >\r\n                        <TableHead  className={classes.allergyHead}>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cellHead}>ID</TableCell>\r\n                            <TableCell className={classes.cellHead}>Type</TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Category\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Criticality\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Onset Date\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Recorded Date\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Recorder Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Asserter Reference\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Last Occurance\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead} colSpan={4}>\r\n                              Reaction\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell\r\n                              colSpan={9}\r\n                              className={classes.cellHead}\r\n                            ></TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Test Substance\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Description\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Onset\r\n                            </TableCell>\r\n                            <TableCell className={classes.cellHead}>\r\n                              Severity\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.id}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.type}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.category}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.criticality}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.onsetdatetime}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.recordedDate}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.recorderReference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.asserterReference}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.lastOccurrence}\r\n                            </TableCell>\r\n\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.testSubstance}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.description}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.onset}\r\n                            </TableCell>\r\n                            <TableCell className={classes.cell}>\r\n                              {data.allergyintolerance.reaction.severity}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </React.Fragment>\r\n        ) : (\r\n          <LinearProgress />\r\n        )}\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            component={Link}\r\n            to=\"/view-patients\"\r\n          >\r\n            Back\r\n          </Button>\r\n        </Grid>\r\n        {addMedDialog}{\" \"}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientDetails;\r\n",["117","118"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js",["119"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Typography, TextField } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Axios from \"axios\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nlet baseURL=\"http://fhirmediservice-http-aceistio3.cloud-integration-ocp45-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/fhirmedicationservice/v1/medicationrequest?identifier=\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: \"3em\",\r\n  },\r\n  cell:{\r\n    border : \"1px solid black\"\r\n  }\r\n}));\r\n\r\nconst MedicationDetails = (props) => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\" \");\r\n  const [data, setData] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    baseURL+=id;\r\n    console.log(\"Base url\",baseURL)\r\n\r\n    const instance = Axios.create({baseURL});\r\n\r\n    const request = await instance.get();\r\n    if (request.data) {\r\n      setData(request.data);\r\n      console.log(\"Res is...\",request)\r\n      setLoaded(true);\r\n    } else setData({});\r\n\r\n    //   return request;\r\n\r\n    console.log(\"ID entered is...\", id);\r\n    console.log(\"Medication is \", data);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"flex-start\"\r\n        justify=\"space-between\"\r\n        className={classes.root}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Pharmacy\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <form noValidate autoComplete=\"off\" onSubmit={(e) => handleSearch(e)}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              onChange={(event) => setId(event.target.value)}\r\n              placeholder=\"Enter ID\"\r\n            />\r\n            <IconButton\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              disabled={id.length === 0 || id === \" \"}\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </form>\r\n        </Grid>\r\n        <Grid item>\r\n          {loaded ? (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\">Patient</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Unique ID</TableCell>\r\n                       <TableCell className={classes.cell}>Last Updated</TableCell>\r\n                       <TableCell className={classes.cell}>First Name</TableCell>\r\n                       <TableCell className={classes.cell}>Last Name</TableCell>\r\n                       <TableCell className={classes.cell}>Gender</TableCell>\r\n                       <TableCell className={classes.cell}>Birth Date</TableCell>\r\n                       <TableCell className={classes.cell}>Deceased</TableCell>\r\n                       <TableCell className={classes.cell}>Mobile</TableCell>\r\n                       <TableCell className={classes.cell}>Address</TableCell>\r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.patient.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.identifier}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastUpdatedDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.firstName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.gender}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.birthDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.deceased?\"true\":\"false\"}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.mobile}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.address[0].text}</TableCell>\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n              <Typography variant=\"h6\" style={{paddingTop:\"1em\"}}>Medication</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Status</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}>Medication Reference</TableCell>\r\n                       <TableCell colSpan={2} className={classes.cell}>Practitioner</TableCell>\r\n                       <TableCell colSpan={1} className={classes.cell}>Encounter</TableCell>\r\n                       <TableCell className={classes.cell}>Authored On</TableCell>\r\n                       <TableCell className={classes.cell}>Disease</TableCell>\r\n                       <TableCell className={classes.cell}>Dosage Instruction</TableCell>\r\n                   </TableRow>\r\n                   <TableRow>\r\n                       <TableCell colSpan={2} className={classes.cell}></TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Medicine Name</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}> </TableCell>\r\n                      \r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.medication.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.status}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.medicineName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.encounter.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.authoredOn}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.disease}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.dosageInstruction[0].text}</TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <LinearProgress />\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicationDetails;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js",["120","121"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Encounter.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterById.js",["122","123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":94,"column":9,"nodeType":"132","messageId":"133","endLine":94,"endColumn":20},{"ruleId":"124","replacedBy":"134"},{"ruleId":"126","replacedBy":"135"},{"ruleId":"124","replacedBy":"136"},{"ruleId":"126","replacedBy":"137"},{"ruleId":"124","replacedBy":"138"},{"ruleId":"126","replacedBy":"139"},{"ruleId":"130","severity":1,"message":"140","line":16,"column":8,"nodeType":"132","messageId":"133","endLine":16,"endColumn":22},{"ruleId":"141","severity":1,"message":"142","line":105,"column":6,"nodeType":"143","endLine":105,"endColumn":35,"suggestions":"144"},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},{"ruleId":"130","severity":1,"message":"147","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"148","line":40,"column":10,"nodeType":"132","messageId":"133","endLine":40,"endColumn":18},{"ruleId":"130","severity":1,"message":"149","line":44,"column":10,"nodeType":"132","messageId":"133","endLine":44,"endColumn":21},{"ruleId":"130","severity":1,"message":"150","line":8,"column":16,"nodeType":"132","messageId":"133","endLine":8,"endColumn":27},{"ruleId":"130","severity":1,"message":"151","line":83,"column":9,"nodeType":"132","messageId":"133","endLine":83,"endColumn":24},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],"no-unused-vars","'handleClick' is assigned a value but never used.","Identifier","unusedVar",["152"],["153"],["152"],["153"],["152"],["153"],"'LinearProgress' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'medicationData'. Either include it or remove the dependency array. You can also do a functional update 'setMedicationData(m => ...)' if you only need 'medicationData' in the 'setMedicationData' call.","ArrayExpression",["154"],["152"],["153"],"'useEffect' is defined but never used.","'password' is assigned a value but never used.","'fetchStatus' is assigned a value but never used.","'CardActions' is defined but never used.","'handleClickOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Update the dependencies array to be: [props.path, params.id, data, medicationData]",{"range":"157","text":"158"},[3092,3121],"[props.path, params.id, data, medicationData]"]