[{"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js":"1","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js":"2","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js":"3","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js":"4","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js":"5","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js":"6","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js":"7","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js":"8","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js":"9","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js":"10","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js":"11","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js":"12","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js":"13","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js":"14","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js":"15","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js":"16","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js":"17","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js":"18","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js":"19"},{"size":210,"mtime":1606394569299,"results":"20","hashOfConfig":"21"},{"size":697,"mtime":1606994785185,"results":"22","hashOfConfig":"21"},{"size":3416,"mtime":1606994775555,"results":"23","hashOfConfig":"21"},{"size":2621,"mtime":1622114314932,"results":"24","hashOfConfig":"21"},{"size":796,"mtime":1606826599793,"results":"25","hashOfConfig":"21"},{"size":2159,"mtime":1607005810163,"results":"26","hashOfConfig":"21"},{"size":1461,"mtime":1606801261298,"results":"27","hashOfConfig":"21"},{"size":2075,"mtime":1606904458619,"results":"28","hashOfConfig":"21"},{"size":4507,"mtime":1622195765386,"results":"29","hashOfConfig":"21"},{"size":245,"mtime":1620883086032,"results":"30","hashOfConfig":"21"},{"size":5631,"mtime":1607063105483,"results":"31","hashOfConfig":"21"},{"size":4219,"mtime":1607067433211,"results":"32","hashOfConfig":"21"},{"size":2153,"mtime":1607057973118,"results":"33","hashOfConfig":"21"},{"size":4011,"mtime":1607067582717,"results":"34","hashOfConfig":"21"},{"size":4210,"mtime":1607008656874,"results":"35","hashOfConfig":"21"},{"size":4524,"mtime":1607059461055,"results":"36","hashOfConfig":"21"},{"size":9883,"mtime":1620717669443,"results":"37","hashOfConfig":"21"},{"size":24771,"mtime":1622211805914,"results":"38","hashOfConfig":"21"},{"size":8188,"mtime":1622195772264,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"18q8pxw",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js",[],["86","87"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js",[],["88","89"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js",[],["90","91"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js",[],["92","93"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js",["94","95"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js",["96"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n}));\r\n\r\nconst PatientById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [patient, setPatient] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setPatient(result.data);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    const result = await axios.delete(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);   \r\n      setTimeout(()=>{      setStatus(\"loading\");\r\n      \r\n    },2000)\r\n      setPatient({});\r\n      enqueueSnackbar(\"Deleted successfully!\");    \r\n  };\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n           \r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/patient\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Patient Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {patient[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{patient.identifier[0].period.start}</Typography>\r\n              <Typography><b>Assigner</b>&nbsp;{patient.identifier[0].assigner.display}</Typography>\r\n              <Typography><b>Active</b>&nbsp;{patient[\"active\"].toString()}</Typography>\r\n              <Typography><b>Name</b>&nbsp;{patient.name[0].given.toString()}</Typography>\r\n              <Typography><b>Work</b>&nbsp;{patient.telecom[1].value.toString()}</Typography>\r\n              <Typography><b>Mobile</b>&nbsp;{patient.telecom[2].value.toString()}</Typography>\r\n\r\n              <Typography><b>Gender</b>&nbsp;{patient.gender.toString()}</Typography>\r\n              <Typography><b>DOB</b>&nbsp;{patient.birthDate}</Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n        <Button variant=\"contained\" color=\"secondary\"size=\"small\" onClick={handleClickOpen}>Delete</Button>\r\n      </CardActions>\r\n          </Card>\r\n          <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n           Confirm to delete patient data.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={()=>{handleClose();handleDelete();}} color=\"secondary\" autoFocus>\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nPatientById.propTypes = {\r\n  patient: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    identifier: PropTypes.array,\r\n  }),\r\n};\r\n\r\nexport default PatientById;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js",["97"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n    \r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n    margin: \"2rem\",\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    margin: \"1rem\",\r\n  },\r\n  message:{\r\n    textAlign:\"center\",\r\n    color:theme.palette.common.red\r\n  }\r\n}));\r\nconst ObservationTable = (props) => {\r\n  const classes = useStyles();\r\n  const [patients, setPatients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if(request.total!==0)\r\n      setPatients(request.data.entry);\r\n      else\r\n      setPatients([])\r\n      console.log(\"Request...\",request.data.entry)\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h4\" className={classes.heading}>\r\n        Observation Data\r\n      </Typography>\r\n      {patients?(<TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>ID</TableCell>\r\n              <TableCell>Test Date</TableCell>\r\n              <TableCell colSpan={3}>Tag</TableCell>\r\n              <TableCell colSpan={3}>Coding Category</TableCell>\r\n              <TableCell colSpan={3}>Coding</TableCell>\r\n             \r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n           {\r\n             patients.map(patient=>(\r\n              <TableRow>\r\n              <TableCell>{patient.resource.id}</TableCell>\r\n              <TableCell>{patient.resource.effectiveDateTime}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].system}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].code}</TableCell>\r\n              <TableCell>{patient.resource.meta.tag[0].display}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].system}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].code}</TableCell>\r\n              <TableCell>{patient.resource.category[0].coding[0].display}</TableCell>\r\n            \r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.system}<br/></React.Fragment>))\r\n              }</TableCell>\r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.code}<br/></React.Fragment>))\r\n              }</TableCell>\r\n              <TableCell>  {\r\n                patient.resource.code.coding.map(code=>(<React.Fragment>{code.display}<br/></React.Fragment>))\r\n              }</TableCell>\r\n            </TableRow>\r\n             ))\r\n           }\r\n\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>):<Typography className={classes.message}>No Record found!</Typography>}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/observation\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ObservationTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js",["98"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n    margin: \"2rem\",\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    margin: \"1rem\",\r\n  },\r\n  message:{\r\n    textAlign:\"center\",\r\n    color:theme.palette.common.red\r\n  }\r\n}));\r\nconst AllergyTable = (props) => {\r\n  const classes = useStyles();\r\n  const [allergy, setAllergy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if(request.total!==0)\r\n      setAllergy(request.data.entry);\r\n      else\r\n      setAllergy([]);\r\n      console.log(request.data.entry)\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h4\" className={classes.heading}>\r\n        Allergy Intolerance Data\r\n      </Typography>\r\n      {allergy?(<TableContainer component={Paper}>\r\n        <Table className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell colSpan={5}>ID</TableCell>\r\n              <TableCell colSpan={3}>Substance</TableCell>\r\n              <TableCell colSpan={3}>Manifestation</TableCell>           \r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell>Last Occurance</TableCell>\r\n              <TableCell>Categories</TableCell>\r\n              <TableCell>Criticality</TableCell>\r\n              <TableCell>Description</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n              <TableCell>System</TableCell>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Display</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n           {\r\n             allergy.map(allergy=>(\r\n              <TableRow>\r\n              <TableCell>{allergy[\"resource\"][\"id\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"lastOccurrence\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"category\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"][\"criticality\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].note[0][\"text\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"system\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"code\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\"display\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"system\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"code\"]}</TableCell>\r\n              <TableCell>{allergy[\"resource\"].reaction[1][\"manifestation\"][0].coding[0][\"display\"]}</TableCell>\r\n            </TableRow>\r\n             ))\r\n           }\r\n\r\n           \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>):<Typography className={classes.message}>No record found!</Typography>}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/allergy-intolerance\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllergyTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js",["99","100"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n  subHeading:{\r\n      color:theme.palette.common.blue\r\n  }\r\n}));\r\n\r\nconst ObservationById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [observation, setObservation] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Observation/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setObservation(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            // variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n            // onClick={handleSearch}\r\n            // endIcon={<SearchIcon />}\r\n            // className={classes.button}\r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/observation\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Observation Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {observation[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{observation.effectiveDateTime}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Tag</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"display\"]}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Coding Category</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"display\"]}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ObservationById;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js",["101","102"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js",["103"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js",["104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"107","replacedBy":"110"},{"ruleId":"105","replacedBy":"111"},{"ruleId":"107","replacedBy":"112"},{"ruleId":"105","replacedBy":"113"},{"ruleId":"107","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":22},{"ruleId":"115","severity":1,"message":"119","line":17,"column":8,"nodeType":"117","messageId":"118","endLine":17,"endColumn":22},{"ruleId":"115","severity":1,"message":"120","line":45,"column":28,"nodeType":"117","messageId":"118","endLine":45,"endColumn":41},{"ruleId":"115","severity":1,"message":"116","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":22},{"ruleId":"115","severity":1,"message":"116","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":8,"column":16,"nodeType":"117","messageId":"118","endLine":8,"endColumn":27},{"ruleId":"115","severity":1,"message":"120","line":41,"column":28,"nodeType":"117","messageId":"118","endLine":41,"endColumn":41},{"ruleId":"115","severity":1,"message":"121","line":8,"column":16,"nodeType":"117","messageId":"118","endLine":8,"endColumn":27},{"ruleId":"115","severity":1,"message":"120","line":41,"column":28,"nodeType":"117","messageId":"118","endLine":41,"endColumn":41},{"ruleId":"122","severity":1,"message":"123","line":87,"column":6,"nodeType":"124","endLine":87,"endColumn":35,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"126","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],["127"],["128"],["127"],["128"],"no-unused-vars","'LinearProgress' is defined but never used.","Identifier","unusedVar","'PatientDetails' is defined but never used.","'closeSnackbar' is assigned a value but never used.","'CardActions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'medicationData'. Either include it or remove the dependency array. You can also do a functional update 'setMedicationData(m => ...)' if you only need 'medicationData' in the 'setMedicationData' call.","ArrayExpression",["129"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},"Update the dependencies array to be: [props.path, params.id, data, medicationData]",{"range":"132","text":"133"},[2703,2732],"[props.path, params.id, data, medicationData]"]