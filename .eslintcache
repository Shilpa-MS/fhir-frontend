[{"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js":"1","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js":"2","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js":"3","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js":"4","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js":"5","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js":"6","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js":"7","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js":"8","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js":"9","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js":"10","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js":"11","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js":"12","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js":"13","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js":"14","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js":"15","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js":"16","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js":"17","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js":"18","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js":"19","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js":"20","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterTable.js":"21","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Encounter.js":"22","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterById.js":"23"},{"size":210,"mtime":1606394569299,"results":"24","hashOfConfig":"25"},{"size":869,"mtime":1622975410107,"results":"26","hashOfConfig":"25"},{"size":5620,"mtime":1624456055488,"results":"27","hashOfConfig":"25"},{"size":2948,"mtime":1624943653022,"results":"28","hashOfConfig":"25"},{"size":1385,"mtime":1622976950459,"results":"29","hashOfConfig":"25"},{"size":3177,"mtime":1622976516208,"results":"30","hashOfConfig":"25"},{"size":1461,"mtime":1606801261298,"results":"31","hashOfConfig":"25"},{"size":3016,"mtime":1622976715467,"results":"32","hashOfConfig":"25"},{"size":5201,"mtime":1624456257709,"results":"33","hashOfConfig":"25"},{"size":237,"mtime":1623229426071,"results":"34","hashOfConfig":"25"},{"size":7630,"mtime":1624455843096,"results":"35","hashOfConfig":"25"},{"size":7247,"mtime":1624456001360,"results":"36","hashOfConfig":"25"},{"size":3169,"mtime":1622976354672,"results":"37","hashOfConfig":"25"},{"size":6601,"mtime":1624456213984,"results":"38","hashOfConfig":"25"},{"size":4712,"mtime":1624024760350,"results":"39","hashOfConfig":"25"},{"size":5022,"mtime":1624455932763,"results":"40","hashOfConfig":"25"},{"size":18561,"mtime":1624454617117,"results":"41","hashOfConfig":"25"},{"size":25407,"mtime":1624943800824,"results":"42","hashOfConfig":"25"},{"size":8188,"mtime":1622195772264,"results":"43","hashOfConfig":"25"},{"size":7826,"mtime":1622799383901,"results":"44","hashOfConfig":"25"},{"size":4575,"mtime":1624026652999,"results":"45","hashOfConfig":"25"},{"size":1742,"mtime":1624027153253,"results":"46","hashOfConfig":"25"},{"size":6612,"mtime":1624455867498,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"18q8pxw",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js",[],["104","105"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js",[],["106","107"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js",["108"],"import React, { useState } from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nimport routes from \"../data/routes.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbarMargin: {\r\n    ...theme.mixins.toolbar,\r\n    // marginBottom:\"1em\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    textTransform: \"none\",\r\n    fontFamily: \"Roboto\",\r\n    fontSize:\"1.5rem\",\r\n    padding:\"1em\"\r\n    \r\n  },\r\n  drawer: {\r\n    backgroundColor: theme.palette.common.green,\r\n    marginTop:\"2em\"\r\n  },\r\n  drawerItem: {\r\n    ...theme.typography.drawer,\r\n    opacity: 0.7,\r\n    color: \"black\",\r\n  },\r\n  drawerItemSelected: {\r\n    ...theme.typography.drawer,\r\n    opacity: 1,\r\n    color: \"black\",\r\n    \"& .MuiListItemText-root\": {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  drawerIconContainer: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  appbar: {\r\n    zIndex: theme.zIndex.modal + 1,\r\n  },\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n  });\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [user, setUser] = useState({ userName: \"\", password: \"\" });\r\n  const [buttonText, setButtonText] = useState(\"Login\");\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    localStorage.setItem(\"username\", user.userName);\r\n    setOpenDialog(false);\r\n    setButtonText(\"Logout\");\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"username\");\r\n    setButtonText(\"Login\");\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (buttonText === \"Login\") handleOpenDialog();\r\n    else handleLogout();\r\n  };\r\n\r\n  const login = (\r\n    <React.Fragment>\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Login</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Username\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, userName: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <TextField\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, password: e.target.value });\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const drawer = (\r\n    <React.Fragment>\r\n      <Drawer\r\n        open={openDrawer}\r\n        onClose={() => setOpenDrawer(false)}\r\n        onOpen={() => setOpenDrawer(true)}\r\n        classes={{ paper: classes.drawer }}\r\n      >\r\n        <div className={classes.toolbarMargin} />\r\n        <List disablePadding>\r\n          {routes.map((route) => (\r\n            <ListItem\r\n              divider\r\n              button\r\n              component={Link}\r\n              to={route.link}\r\n              onClick={() => {\r\n                setOpenDrawer(false);\r\n                setValue(route.activeIndex);\r\n              }}\r\n              selected={value === route.activeIndex}\r\n              classes={{ selected: classes.drawerItemSelected }}\r\n            >\r\n              <ListItemText className={classes.drawerItem} disableTypography>\r\n                {route.name}\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ElevationScroll>\r\n        <AppBar className={classes.appbar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              onClick={() => setOpenDrawer(!openDrawer)}\r\n              className={classes.drawerIconContainer}\r\n            >\r\n              <MenuIcon style={{ color: \"white\" }} />\r\n            </IconButton>\r\n            {drawer}\r\n            <Button className={classes.drawerIconContainer} component={Link} to=\"/\">\r\n              <Typography className={classes.title}>\r\n                General Practitioner Portal\r\n              </Typography>\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              size=\"small\"\r\n              style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n              onClick={handleClick}\r\n            >\r\n              {buttonText}\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <div className={classes.toolbarMargin} />\r\n      {login}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js",[],["109","110"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js",[],["111","112"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js",[],["113","114"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js",[],["115","116"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js",["117"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport {Typography,Grid} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"./axios\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  heading: {\r\n    color: theme.palette.common.blue,\r\n    textAlign: \"center\",\r\n    fontWeight: 200,\r\n  },\r\n  button: {\r\n    marginRight: \"auto\",\r\n    marginTop: \"1rem\",\r\n  },\r\n  message: {\r\n    textAlign: \"center\",\r\n    color: theme.palette.common.red,\r\n  },\r\n  cell:{\r\n    border:\"1px solid black\",\r\n    padding:\"0.1em\"\r\n  },\r\n  cellHead:{\r\n    border:\"1px solid black\",\r\n    padding:\"0.1em\",\r\n    backgroundColor:theme.palette.common.bn2\r\n  },\r\n  root:{\r\n    flexGrow:1,\r\n    padding:\"3em\"\r\n  }\r\n}));\r\nconst AllergyTable = (props) => {\r\n  const classes = useStyles();\r\n  const [allergy, setAllergy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getPatient() {\r\n      const request = await axios.get(`${props.path}`);\r\n      if (request.total !== 0) setAllergy(request.data.entry);\r\n      else setAllergy([]);\r\n      console.log(request.data.entry);\r\n      return request;\r\n    }\r\n    getPatient();\r\n  }, [props.path]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container className={classes.root} direction=\"column\">\r\n        <Grid item>\r\n        <Typography variant=\"h4\" className={classes.heading} gutterBottom>\r\n        Allergy Intolerance Data\r\n      </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n        {allergy ? (\r\n        <TableContainer component={Paper}>\r\n          <Table  >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.cellHead}>ID</TableCell>\r\n                <TableCell className={classes.cellHead}>Last Occurance</TableCell>\r\n                <TableCell className={classes.cellHead}>Categories</TableCell>\r\n                <TableCell className={classes.cellHead}>Criticality</TableCell>\r\n                <TableCell className={classes.cellHead}>Description</TableCell>\r\n                <TableCell colSpan={3} className={classes.cellHead}>Substance</TableCell>\r\n                <TableCell colSpan={3} className={classes.cellHead}>Manifestation</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell className={classes.cellHead}></TableCell>\r\n                <TableCell className={classes.cellHead}></TableCell>\r\n                <TableCell className={classes.cellHead}></TableCell>\r\n                <TableCell className={classes.cellHead}></TableCell>\r\n                <TableCell className={classes.cellHead}></TableCell>\r\n\r\n                <TableCell className={classes.cellHead}>System</TableCell>\r\n                <TableCell className={classes.cellHead}>Code</TableCell>\r\n                <TableCell className={classes.cellHead}>Display</TableCell>\r\n                <TableCell className={classes.cellHead}>System</TableCell>\r\n                <TableCell className={classes.cellHead}>Code</TableCell>\r\n                <TableCell className={classes.cellHead}>Display</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {allergy.map((allergy) => (\r\n                <TableRow>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"id\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"lastOccurrence\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"category\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>{allergy[\"resource\"][\"criticality\"]}</TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].note\r\n                      ? allergy[\"resource\"].note[0][\"text\"]\r\n                      : \"\"}\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]\r\n                      ? allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                          \"system\"\r\n                        ]\r\n                      : \"\"}\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]?\r\n                      allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                        \"code\"\r\n                      ]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[0][\"substance\"]?\r\n                      allergy[\"resource\"].reaction[0][\"substance\"].coding[0][\r\n                        \"display\"\r\n                      ]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                     {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"system\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"code\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell className={classes.cell}>\r\n                    {allergy[\"resource\"].reaction[1]?\r\n                      allergy[\"resource\"].reaction[1][\"manifestation\"][0]\r\n                        .coding[0][\"display\"]:\"\"\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <Typography className={classes.message}>No record found!</Typography>\r\n      )}\r\n        </Grid>\r\n        <Grid item>\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        component={Link}\r\n        to=\"/allergy-intolerance\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n        </Grid>\r\n      </Grid>\r\n     \r\n     \r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllergyTable;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js",["118"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js",["119"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Typography, TextField } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Axios from \"axios\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nlet baseURL=\"http://fhirmediservice-http-aceistio3.cloud-integration-ocp45-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/fhirmedicationservice/v1/medicationrequest?identifier=\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: \"3em\",\r\n  },\r\n  cell:{\r\n    border : \"1px solid black\"\r\n  }\r\n}));\r\n\r\nconst MedicationDetails = (props) => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\" \");\r\n  const [data, setData] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    baseURL+=id;\r\n    console.log(\"Base url\",baseURL)\r\n\r\n    const instance = Axios.create({baseURL});\r\n\r\n    const request = await instance.get();\r\n    if (request.data) {\r\n      setData(request.data);\r\n      console.log(\"Res is...\",request)\r\n      setLoaded(true);\r\n    } else setData({});\r\n\r\n    //   return request;\r\n\r\n    console.log(\"ID entered is...\", id);\r\n    console.log(\"Medication is \", data);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"flex-start\"\r\n        justify=\"space-between\"\r\n        className={classes.root}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Pharmacy\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <form noValidate autoComplete=\"off\" onSubmit={(e) => handleSearch(e)}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              onChange={(event) => setId(event.target.value)}\r\n              placeholder=\"Enter ID\"\r\n            />\r\n            <IconButton\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              disabled={id.length === 0 || id === \" \"}\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </form>\r\n        </Grid>\r\n        <Grid item>\r\n          {loaded ? (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\">Patient</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Unique ID</TableCell>\r\n                       <TableCell className={classes.cell}>Last Updated</TableCell>\r\n                       <TableCell className={classes.cell}>First Name</TableCell>\r\n                       <TableCell className={classes.cell}>Last Name</TableCell>\r\n                       <TableCell className={classes.cell}>Gender</TableCell>\r\n                       <TableCell className={classes.cell}>Birth Date</TableCell>\r\n                       <TableCell className={classes.cell}>Deceased</TableCell>\r\n                       <TableCell className={classes.cell}>Mobile</TableCell>\r\n                       <TableCell className={classes.cell}>Address</TableCell>\r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.patient.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.identifier}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastUpdatedDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.firstName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.gender}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.birthDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.deceased?\"true\":\"false\"}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.mobile}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.address[0].text}</TableCell>\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n              <Typography variant=\"h6\" style={{paddingTop:\"1em\"}}>Medication</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Status</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}>Medication Reference</TableCell>\r\n                       <TableCell colSpan={2} className={classes.cell}>Practitioner</TableCell>\r\n                       <TableCell colSpan={1} className={classes.cell}>Encounter</TableCell>\r\n                       <TableCell className={classes.cell}>Authored On</TableCell>\r\n                       <TableCell className={classes.cell}>Disease</TableCell>\r\n                       <TableCell className={classes.cell}>Dosage Instruction</TableCell>\r\n                   </TableRow>\r\n                   <TableRow>\r\n                       <TableCell colSpan={2} className={classes.cell}></TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Medicine Name</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}> </TableCell>\r\n                      \r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.medication.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.status}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.medicineName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.encounter.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.authoredOn}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.disease}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.dosageInstruction[0].text}</TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <LinearProgress />\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicationDetails;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js",["120","121"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterTable.js",[],["122","123"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Encounter.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\EncounterById.js",["124","125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":98,"column":9,"nodeType":"134","messageId":"135","endLine":98,"endColumn":20},{"ruleId":"126","replacedBy":"136"},{"ruleId":"128","replacedBy":"137"},{"ruleId":"126","replacedBy":"138"},{"ruleId":"128","replacedBy":"139"},{"ruleId":"126","replacedBy":"140"},{"ruleId":"128","replacedBy":"141"},{"ruleId":"126","replacedBy":"142"},{"ruleId":"128","replacedBy":"143"},{"ruleId":"132","severity":1,"message":"144","line":16,"column":8,"nodeType":"134","messageId":"135","endLine":16,"endColumn":22},{"ruleId":"145","severity":1,"message":"146","line":105,"column":6,"nodeType":"147","endLine":105,"endColumn":8,"suggestions":"148"},{"ruleId":"132","severity":1,"message":"149","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"150","line":40,"column":10,"nodeType":"134","messageId":"135","endLine":40,"endColumn":18},{"ruleId":"132","severity":1,"message":"151","line":44,"column":10,"nodeType":"134","messageId":"135","endLine":44,"endColumn":21},{"ruleId":"126","replacedBy":"152"},{"ruleId":"128","replacedBy":"153"},{"ruleId":"132","severity":1,"message":"154","line":8,"column":16,"nodeType":"134","messageId":"135","endLine":8,"endColumn":27},{"ruleId":"132","severity":1,"message":"155","line":84,"column":9,"nodeType":"134","messageId":"135","endLine":84,"endColumn":24},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],"no-unused-vars","'handleClick' is assigned a value but never used.","Identifier","unusedVar",["156"],["157"],["156"],["157"],["156"],["157"],["156"],["157"],"'LinearProgress' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data.length', 'medicationData', 'params.id', and 'props.path'. Either include them or remove the dependency array. You can also do a functional update 'setMedicationData(m => ...)' if you only need 'medicationData' in the 'setMedicationData' call.","ArrayExpression",["158"],"'useEffect' is defined but never used.","'password' is assigned a value but never used.","'fetchStatus' is assigned a value but never used.",["156"],["157"],"'CardActions' is defined but never used.","'handleClickOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [data.length, medicationData, params.id, props.path]",{"range":"161","text":"162"},[3073,3075],"[data.length, medicationData, params.id, props.path]"]