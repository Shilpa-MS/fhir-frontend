[{"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js":"1","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js":"2","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js":"3","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js":"4","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js":"5","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js":"6","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js":"7","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js":"8","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js":"9","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js":"10","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js":"11","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js":"12","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js":"13","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js":"14","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js":"15","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js":"16","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js":"17","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js":"18","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js":"19","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js":"20"},{"size":210,"mtime":1606394569299,"results":"21","hashOfConfig":"22"},{"size":869,"mtime":1622975410107,"results":"23","hashOfConfig":"22"},{"size":5518,"mtime":1622974545614,"results":"24","hashOfConfig":"22"},{"size":2621,"mtime":1622900303820,"results":"25","hashOfConfig":"22"},{"size":1385,"mtime":1622976950459,"results":"26","hashOfConfig":"22"},{"size":3177,"mtime":1622976516208,"results":"27","hashOfConfig":"22"},{"size":1461,"mtime":1606801261298,"results":"28","hashOfConfig":"22"},{"size":3016,"mtime":1622976715467,"results":"29","hashOfConfig":"22"},{"size":5265,"mtime":1623243909289,"results":"30","hashOfConfig":"22"},{"size":237,"mtime":1623229426071,"results":"31","hashOfConfig":"22"},{"size":5631,"mtime":1607063105483,"results":"32","hashOfConfig":"22"},{"size":7007,"mtime":1623233113691,"results":"33","hashOfConfig":"22"},{"size":3169,"mtime":1622976354672,"results":"34","hashOfConfig":"22"},{"size":6410,"mtime":1623230919184,"results":"35","hashOfConfig":"22"},{"size":4210,"mtime":1607008656874,"results":"36","hashOfConfig":"22"},{"size":4524,"mtime":1607059461055,"results":"37","hashOfConfig":"22"},{"size":15008,"mtime":1622961098589,"results":"38","hashOfConfig":"22"},{"size":25453,"mtime":1623245964424,"results":"39","hashOfConfig":"22"},{"size":8188,"mtime":1622195772264,"results":"40","hashOfConfig":"22"},{"size":7826,"mtime":1622799383901,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18q8pxw",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"51"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\index.js",[],["92","93"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Theme.js",[],["94","95"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Header.js",["96"],"import React, { useState } from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport { Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nimport routes from \"../data/routes.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbarMargin: {\r\n    ...theme.mixins.toolbar,\r\n    // marginBottom:\"1em\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    textTransform: \"none\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  drawer: {\r\n    backgroundColor: theme.palette.common.green,\r\n  },\r\n  drawerItem: {\r\n    ...theme.typography.drawer,\r\n    opacity: 0.7,\r\n    color: \"white\",\r\n  },\r\n  drawerItemSelected: {\r\n    ...theme.typography.drawer,\r\n    opacity: 1,\r\n    color: \"white\",\r\n    \"& .MuiListItemText-root\": {\r\n      opacity: 1,\r\n    },\r\n  },\r\n  drawerIconContainer: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  appbar: {\r\n    zIndex: theme.zIndex.modal + 1,\r\n  },\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0,\r\n  });\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [user, setUser] = useState({ userName: \"\", password: \"\" });\r\n  const [buttonText, setButtonText] = useState(\"Login\");\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    localStorage.setItem(\"username\", user.userName);\r\n    setOpenDialog(false);\r\n    setButtonText(\"Logout\");\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"username\");\r\n    setButtonText(\"Login\");\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (buttonText === \"Login\") handleOpenDialog();\r\n    else handleLogout();\r\n  };\r\n\r\n  const login = (\r\n    <React.Fragment>\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Login</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Username\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, userName: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <TextField\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoFocus\r\n            onChange={(e) => {\r\n              setUser({ ...user, password: e.target.value });\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const drawer = (\r\n    <React.Fragment>\r\n      <Drawer\r\n        open={openDrawer}\r\n        onClose={() => setOpenDrawer(false)}\r\n        onOpen={() => setOpenDrawer(true)}\r\n        classes={{ paper: classes.drawer }}\r\n      >\r\n        <div className={classes.toolbarMargin} />\r\n        <List disablePadding>\r\n          {routes.map((route) => (\r\n            <ListItem\r\n              divider\r\n              button\r\n              component={Link}\r\n              to={route.link}\r\n              onClick={() => {\r\n                setOpenDrawer(false);\r\n                setValue(route.activeIndex);\r\n              }}\r\n              selected={value === route.activeIndex}\r\n              classes={{ selected: classes.drawerItemSelected }}\r\n            >\r\n              <ListItemText className={classes.drawerItem} disableTypography>\r\n                {route.name}\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ElevationScroll>\r\n        <AppBar className={classes.appbar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              onClick={() => setOpenDrawer(!openDrawer)}\r\n              className={classes.drawerIconContainer}\r\n            >\r\n              <MenuIcon style={{ color: \"white\" }} />\r\n            </IconButton>\r\n            {drawer}\r\n            <Button className={classes.drawerIconContainer}>\r\n              <Typography className={classes.title}>\r\n                FHIR Data Resources\r\n              </Typography>\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              size=\"small\"\r\n              style={{ marginLeft: \"auto\", marginRight: 10 }}\r\n              onClick={handleClick}\r\n            >\r\n              {buttonText}\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <div className={classes.toolbarMargin} />\r\n      {login}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n",["97","98"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\App.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Home.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Observation.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Footer.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Patient.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientTable.js",["99"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\axios.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientById.js",["100"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n}));\r\n\r\nconst PatientById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [patient, setPatient] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setPatient(result.data);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    const result = await axios.delete(`Patient/${id}`);\r\n    console.log(\"Search result is...\", result);   \r\n      setTimeout(()=>{      setStatus(\"loading\");\r\n      \r\n    },2000)\r\n      setPatient({});\r\n      enqueueSnackbar(\"Deleted successfully!\");    \r\n  };\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n           \r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/patient\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Patient Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {patient[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{patient.identifier[0].period.start}</Typography>\r\n              <Typography><b>Assigner</b>&nbsp;{patient.identifier[0].assigner.display}</Typography>\r\n              <Typography><b>Active</b>&nbsp;{patient[\"active\"].toString()}</Typography>\r\n              <Typography><b>Name</b>&nbsp;{patient.name[0].given.toString()}</Typography>\r\n              <Typography><b>Work</b>&nbsp;{patient.telecom[1].value.toString()}</Typography>\r\n              <Typography><b>Mobile</b>&nbsp;{patient.telecom[2].value.toString()}</Typography>\r\n\r\n              <Typography><b>Gender</b>&nbsp;{patient.gender.toString()}</Typography>\r\n              <Typography><b>DOB</b>&nbsp;{patient.birthDate}</Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n        <Button variant=\"contained\" color=\"secondary\"size=\"small\" onClick={handleClickOpen}>Delete</Button>\r\n      </CardActions>\r\n          </Card>\r\n          <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to delete?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n           Confirm to delete patient data.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={()=>{handleClose();handleDelete();}} color=\"secondary\" autoFocus>\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nPatientById.propTypes = {\r\n  patient: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    identifier: PropTypes.array,\r\n  }),\r\n};\r\n\r\nexport default PatientById;\r\n",["101","102"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationTable.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyIntolerance.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyTable.js",["103"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\ObservationById.js",["104","105"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n  subHeading:{\r\n      color:theme.palette.common.blue\r\n  }\r\n}));\r\n\r\nconst ObservationById = () => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [observation, setObservation] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`Observation/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setObservation(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            // variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n            // onClick={handleSearch}\r\n            // endIcon={<SearchIcon />}\r\n            // className={classes.button}\r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/observation\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Observation Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {observation[\"id\"]}\r\n              </Typography>\r\n              \r\n              <Typography><b>Test Date</b>&nbsp;{observation.effectiveDateTime}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Tag</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"meta\"][\"tag\"][0][\"display\"]}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Coding Category</Typography>\r\n              <Typography><b>System</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{observation[\"category\"][0][\"coding\"][0][\"display\"]}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ObservationById;\r\n",["106","107"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\AllergyById.js",["108","109"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport axios from \"./axios\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // \"& > *\": {\r\n    //   margin: theme.spacing(1),\r\n    //   width: \"25ch\",\r\n    // },\r\n    flexGrow:1\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  button: {\r\n    marginLeft: \"auto\",\r\n    marginRight:\"1rem\"\r\n   \r\n  },\r\n  subHeading:{\r\n      color:theme.palette.common.blue\r\n  }\r\n}));\r\n\r\nconst AllergyById = (props) => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\"\");\r\n  const [allergy, setAllergy] = useState({});\r\n  const [status, setStatus] = useState(\"loading\");\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    const result = await axios.get(`${props.path}/${id}`);\r\n    console.log(\"Search result is...\", result);\r\n    if (result.data.hasOwnProperty(\"issue\")) {\r\n      enqueueSnackbar(\"Invalid ID!\");\r\n    } else {\r\n      setTimeout(()=>{      setStatus(\"Valid\");\r\n    },2000)\r\n      setAllergy(result.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n              <Toolbar>\r\n\r\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={(e)=>handleSearch(e)}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            onChange={(event) => setId(event.target.value)}\r\n            placeholder=\"Enter ID\"\r\n            \r\n          />\r\n          <IconButton\r\n            // variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            disabled={id.length===0||id===\" \"}\r\n            // onClick={handleSearch}\r\n            // endIcon={<SearchIcon />}\r\n            // className={classes.button}\r\n          >\r\n            <SearchIcon />\r\n          </IconButton>\r\n    \r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        component={Link}\r\n        to=\"/allergy-intolerance\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n      >\r\n        Back\r\n      </Button>\r\n      </Toolbar>\r\n\r\n      {status === \"loading\" ? null : status === \"Valid\" ? (\r\n        <React.Fragment>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                Observation Details\r\n              </Typography>\r\n              <hr/>\r\n              <Typography>\r\n                <b>ID</b>&nbsp;\r\n                {allergy[\"id\"]}\r\n              </Typography>\r\n              <Typography><b>Last Occurrence</b>&nbsp;{allergy[\"lastOccurrence\"]}</Typography>\r\n              <Typography><b>Categories</b>&nbsp;{allergy[\"category\"]}</Typography>\r\n              <Typography><b>Criticality</b>&nbsp;{allergy[\"criticality\"]}</Typography>\r\n              <Typography><b>Description</b>&nbsp;{allergy.note[0][\"text\"]}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Substance</Typography>\r\n              <Typography><b>System</b>&nbsp;{allergy.reaction[0][\"substance\"].coding[0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{allergy.reaction[0][\"substance\"].coding[0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{allergy.reaction[0][\"substance\"].coding[0][\"display\"]}</Typography>\r\n              <Typography variant=\"h6\" component=\"h3\" className={classes.subHeading}>Manifestation</Typography>\r\n              <Typography><b>System</b>&nbsp;{allergy.reaction[1][\"manifestation\"][0].coding[0][\"system\"]}</Typography>\r\n              <Typography><b>Code</b>&nbsp;{allergy.reaction[1][\"manifestation\"][0].coding[0][\"code\"]}</Typography>\r\n              <Typography><b>Display</b>&nbsp;{allergy.reaction[1][\"manifestation\"][0].coding[0][\"display\"]}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </React.Fragment>\r\n      ) : <LinearProgress color=\"secondary\"/>}\r\n     \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default AllergyById;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\Datadisplay.js",[],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\PatientDetails.js",["110"],"C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicationDetails.js",["111"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Typography, TextField } from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Axios from \"axios\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nlet baseURL=\"http://fhirmediservice-http-aceistio3.cloud-integration-ocp45-6fb0b86391cd68c8282858623a1dddff-0000.eu-gb.containers.appdomain.cloud/fhirmedicationservice/v1/medicationrequest?identifier=\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: \"3em\",\r\n  },\r\n  cell:{\r\n    border : \"1px solid black\"\r\n  }\r\n}));\r\n\r\nconst MedicationDetails = (props) => {\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(\" \");\r\n  const [data, setData] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    baseURL+=id;\r\n    console.log(\"Base url\",baseURL)\r\n\r\n    const instance = Axios.create({baseURL});\r\n\r\n    const request = await instance.get();\r\n    if (request.data) {\r\n      setData(request.data);\r\n      console.log(\"Res is...\",request)\r\n      setLoaded(true);\r\n    } else setData({});\r\n\r\n    //   return request;\r\n\r\n    console.log(\"ID entered is...\", id);\r\n    console.log(\"Medication is \", data);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"flex-start\"\r\n        justify=\"space-between\"\r\n        className={classes.root}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Pharmacy\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <form noValidate autoComplete=\"off\" onSubmit={(e) => handleSearch(e)}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              onChange={(event) => setId(event.target.value)}\r\n              placeholder=\"Enter ID\"\r\n            />\r\n            <IconButton\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              disabled={id.length === 0 || id === \" \"}\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </form>\r\n        </Grid>\r\n        <Grid item>\r\n          {loaded ? (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\">Patient</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Unique ID</TableCell>\r\n                       <TableCell className={classes.cell}>Last Updated</TableCell>\r\n                       <TableCell className={classes.cell}>First Name</TableCell>\r\n                       <TableCell className={classes.cell}>Last Name</TableCell>\r\n                       <TableCell className={classes.cell}>Gender</TableCell>\r\n                       <TableCell className={classes.cell}>Birth Date</TableCell>\r\n                       <TableCell className={classes.cell}>Deceased</TableCell>\r\n                       <TableCell className={classes.cell}>Mobile</TableCell>\r\n                       <TableCell className={classes.cell}>Address</TableCell>\r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.patient.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.identifier}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastUpdatedDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.firstName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.lastName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.gender}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.birthDate}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.deceased?\"true\":\"false\"}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.mobile}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.patient.address[0].text}</TableCell>\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n              <Typography variant=\"h6\" style={{paddingTop:\"1em\"}}>Medication</Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                       <TableCell className={classes.cell}>ID</TableCell>\r\n                       <TableCell className={classes.cell}>Status</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}>Medication Reference</TableCell>\r\n                       <TableCell colSpan={2} className={classes.cell}>Practitioner</TableCell>\r\n                       <TableCell colSpan={1} className={classes.cell}>Encounter</TableCell>\r\n                       <TableCell className={classes.cell}>Authored On</TableCell>\r\n                       <TableCell className={classes.cell}>Disease</TableCell>\r\n                       <TableCell className={classes.cell}>Dosage Instruction</TableCell>\r\n                   </TableRow>\r\n                   <TableRow>\r\n                       <TableCell colSpan={2} className={classes.cell}></TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Medicine Name</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell className={classes.cell}>Display</TableCell>\r\n                       <TableCell className={classes.cell}>Reference</TableCell>\r\n                       <TableCell colSpan={3} className={classes.cell}> </TableCell>\r\n                      \r\n                   </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                        <TableCell className={classes.cell}>{data.medication.id}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.status}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.medicationReference.medicineName}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.practitioner.display}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.encounter.reference}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.authoredOn}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.disease}</TableCell>\r\n                       <TableCell className={classes.cell}>{data.medication.dosageInstruction[0].text}</TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableBody>\r\n                  \r\n                </Table>\r\n              </TableContainer>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <LinearProgress />\r\n            </React.Fragment>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MedicationDetails;\r\n","C:\\Users\\shilp\\OneDrive\\Desktop\\work\\fhir-frontend\\src\\components\\MedicineReq.js",["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":94,"column":9,"nodeType":"122","messageId":"123","endLine":94,"endColumn":20},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","replacedBy":"125"},{"ruleId":"120","severity":1,"message":"126","line":16,"column":8,"nodeType":"122","messageId":"123","endLine":16,"endColumn":22},{"ruleId":"120","severity":1,"message":"127","line":45,"column":28,"nodeType":"122","messageId":"123","endLine":45,"endColumn":41},{"ruleId":"114","replacedBy":"128"},{"ruleId":"116","replacedBy":"129"},{"ruleId":"120","severity":1,"message":"126","line":16,"column":8,"nodeType":"122","messageId":"123","endLine":16,"endColumn":22},{"ruleId":"120","severity":1,"message":"130","line":8,"column":16,"nodeType":"122","messageId":"123","endLine":8,"endColumn":27},{"ruleId":"120","severity":1,"message":"127","line":41,"column":28,"nodeType":"122","messageId":"123","endLine":41,"endColumn":41},{"ruleId":"114","replacedBy":"131"},{"ruleId":"116","replacedBy":"132"},{"ruleId":"120","severity":1,"message":"130","line":8,"column":16,"nodeType":"122","messageId":"123","endLine":8,"endColumn":27},{"ruleId":"120","severity":1,"message":"127","line":41,"column":28,"nodeType":"122","messageId":"123","endLine":41,"endColumn":41},{"ruleId":"133","severity":1,"message":"134","line":105,"column":6,"nodeType":"135","endLine":105,"endColumn":35,"suggestions":"136"},{"ruleId":"120","severity":1,"message":"137","line":1,"column":27,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"120","severity":1,"message":"138","line":40,"column":10,"nodeType":"122","messageId":"123","endLine":40,"endColumn":18},{"ruleId":"120","severity":1,"message":"139","line":44,"column":10,"nodeType":"122","messageId":"123","endLine":44,"endColumn":21},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],["140"],["141"],"no-unused-vars","'handleClick' is assigned a value but never used.","Identifier","unusedVar",["140"],["141"],"'LinearProgress' is defined but never used.","'closeSnackbar' is assigned a value but never used.",["140"],["141"],"'CardActions' is defined but never used.",["140"],["141"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'medicationData'. Either include it or remove the dependency array. You can also do a functional update 'setMedicationData(m => ...)' if you only need 'medicationData' in the 'setMedicationData' call.","ArrayExpression",["142"],"'useEffect' is defined but never used.","'password' is assigned a value but never used.","'fetchStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},"Update the dependencies array to be: [props.path, params.id, data, medicationData]",{"range":"145","text":"146"},[3092,3121],"[props.path, params.id, data, medicationData]"]